import numpy as np
# 定义
arr1 = np.array([-9, 7, 4, 3], dtype=str)
print(arr1)  # ['-9' '7' '4' '3']
arr2 = np.array([[-9, 7, 4, 3], [-9, 7, 4, 3], [-9, 7, 4, 3]])
print(arr2)  # [[-9  7  4  3] [-9  7  4  3] [-9  7  4  3]]
print(np.arange(0, 10, 1))  # [0 1 2 3 4 5 6 7 8 9]
print(np.linspace(1, 10, 20, endpoint=True))  # 等差数组
# [ 1.          1.47368421  1.94736842  2.42105263  2.89473684  3.36842105
#   3.84210526  4.31578947  4.78947368  5.26315789  5.73684211  6.21052632
#   6.68421053  7.15789474  7.63157895  8.10526316  8.57894737  9.05263158
#   9.52631579 10.        ]
print(np.ones([2, 3]))  # 二元数组
# [[1. 1. 1.] [1. 1. 1.]]
print(np.ones([2, 3]).ndim)  # 数组维度 2
print(np.ones([2, 3]).shape)  # 数组形状 (2, 3)
print(np.ones([2, 3]).size)  # 数组元素个数 6
print(np.ones([2, 3]).dtype)  # 元素类型 float64
data = ((1.2, 3, 4, 6, 7), (2, 14, 5, 3, 3.3), (1, 2, 4, 6.6, 4))
arr3 = np.array(data)
print(arr3)
# [[ 1.2  3.   4.   6.   7. ] [ 2.  14.   5.   3.   3.3] [ 1.   2.   4.   6.6  4. ]]
print(arr3[0, 2])  # 4.0 == arr3[0][2]
print(arr3[:, 1:3])  # [[ 3.  4.] [14.  5.] [ 2.  4.]]

s = np.array([1, 2, 4, 45, 5, 2, 1, 2, 312, 3, 56, 78, 8, 1])
# 排序
print(np.sort(s))
print(np.argsort(s))
arr1 = np.array([[0, 3, 1], [1, 4, 2], [6, 0, 1]])
print(np.sort(arr1))
print(np.sort(arr1, axis=0))  # 沿着行的方向
# [[0 0 1] [1 3 1] [6 4 2]]
print(np.sort(arr1, axis=1))  # 沿着列的方向
# [[0 1 3] [1 2 4] [0 1 6]]
# 搜索 自定义返回满足条件的情况
print(np.where(s > 3, 1, -1))  # [-1 -1  1  1  1 -1 -1 -1  1 -1  1  1  1 -1]
# 筛选 返回满足条件的元素值
print(np.extract(s > 3, s))  # [  4  45   5 312  56  78   8]
